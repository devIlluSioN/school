// Generated by Haxe 3.4.4

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.unit {
	public class TestResult : global::haxe.lang.HxObject {
		
		public TestResult(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestResult() {
			global::haxe.unit.TestResult.__hx_ctor_haxe_unit_TestResult(this);
		}
		
		
		public static void __hx_ctor_haxe_unit_TestResult(global::haxe.unit.TestResult __hx_this) {
			__hx_this.m_tests = new global::List<object>();
			__hx_this.success = true;
		}
		
		
		public global::List<object> m_tests;
		
		public bool success;
		
		public virtual void @add(global::haxe.unit.TestStatus t) {
			this.m_tests.@add(t);
			if ( ! (t.success) ) {
				this.success = false;
			}
			
		}
		
		
		public virtual string toString() {
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			int failures = 0;
			{
				global::_List.ListNode<object> _g_head = this.m_tests.h;
				while (( _g_head != null )) {
					global::haxe.unit.TestStatus val = ((global::haxe.unit.TestStatus) (_g_head.item) );
					_g_head = _g_head.next;
					global::haxe.unit.TestStatus test = ((global::haxe.unit.TestStatus) (val) );
					if (( test.success == false )) {
						buf_b.Append(((string) ("* ") ));
						buf_b.Append(((string) (global::Std.@string(test.classname)) ));
						buf_b.Append(((string) ("::") ));
						buf_b.Append(((string) (global::Std.@string(test.method)) ));
						buf_b.Append(((string) ("()") ));
						buf_b.Append(((string) ("\n") ));
						buf_b.Append(((string) ("ERR: ") ));
						if (( test.posInfos != null )) {
							buf_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test.posInfos, "fileName", 1648581351, true)))) ));
							buf_b.Append(((string) (":") ));
							buf_b.Append(((string) (global::Std.@string(((int) (global::haxe.lang.Runtime.getField_f(test.posInfos, "lineNumber", 1981972957, true)) ))) ));
							buf_b.Append(((string) ("(") ));
							buf_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test.posInfos, "className", 1547539107, true)))) ));
							buf_b.Append(((string) (".") ));
							buf_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test.posInfos, "methodName", 302979532, true)))) ));
							buf_b.Append(((string) (") - ") ));
						}
						
						buf_b.Append(((string) (global::Std.@string(test.error)) ));
						buf_b.Append(((string) ("\n") ));
						if ( ! (string.Equals(test.backtrace, null)) ) {
							buf_b.Append(((string) (global::Std.@string(test.backtrace)) ));
							buf_b.Append(((string) ("\n") ));
						}
						
						buf_b.Append(((string) ("\n") ));
						 ++ failures;
					}
					
				}
				
			}
			
			buf_b.Append(((string) ("\n") ));
			if (( failures == 0 )) {
				buf_b.Append(((string) ("OK ") ));
			}
			else {
				buf_b.Append(((string) ("FAILED ") ));
			}
			
			buf_b.Append(((string) (global::Std.@string(this.m_tests.length)) ));
			buf_b.Append(((string) (" tests, ") ));
			buf_b.Append(((string) (global::Std.@string(failures)) ));
			buf_b.Append(((string) (" failed, ") ));
			buf_b.Append(((string) (global::Std.@string(( this.m_tests.length - failures ))) ));
			buf_b.Append(((string) (" success") ));
			buf_b.Append(((string) ("\n") ));
			return buf_b.ToString();
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 944645571:
					{
						this.success = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1042306895:
					{
						this.m_tests = ((global::List<object>) (global::List<object>.__hx_cast<object>(((global::List) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 4846113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "add", 4846113)) );
					}
					
					
					case 944645571:
					{
						return this.success;
					}
					
					
					case 1042306895:
					{
						return this.m_tests;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 4846113:
					{
						this.@add(((global::haxe.unit.TestStatus) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("success");
			baseArr.push("m_tests");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


