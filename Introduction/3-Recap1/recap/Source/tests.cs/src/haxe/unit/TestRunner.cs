// Generated by Haxe 3.4.4

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.unit {
	public class TestRunner : global::haxe.lang.HxObject {
		
		static TestRunner() {
			global::haxe.unit.TestRunner.print = ( (( global::haxe.unit.TestRunner_Anon_60__Fun.__hx_current != null )) ? (global::haxe.unit.TestRunner_Anon_60__Fun.__hx_current) : (global::haxe.unit.TestRunner_Anon_60__Fun.__hx_current = ((global::haxe.unit.TestRunner_Anon_60__Fun) (new global::haxe.unit.TestRunner_Anon_60__Fun()) )) );
		}
		
		
		public TestRunner(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestRunner() {
			global::haxe.unit.TestRunner.__hx_ctor_haxe_unit_TestRunner(this);
		}
		
		
		public static void __hx_ctor_haxe_unit_TestRunner(global::haxe.unit.TestRunner __hx_this) {
			__hx_this.result = new global::haxe.unit.TestResult();
			__hx_this.cases = new global::List<object>();
		}
		
		
		public static global::haxe.lang.Function print;
		
		public static void customTrace(object v, object p) {
			global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(p, "fileName", 1648581351, true)), ":"), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(p, "lineNumber", 1981972957, true)) ))), ": "), global::Std.@string(v)), "\n"));
		}
		
		
		public global::haxe.unit.TestResult result;
		
		public global::List<object> cases;
		
		public virtual void @add(global::haxe.unit.TestCase c) {
			this.cases.@add(c);
		}
		
		
		public virtual bool run() {
			this.result = new global::haxe.unit.TestResult();
			{
				global::_List.ListNode<object> _g_head = this.cases.h;
				while (( _g_head != null )) {
					global::haxe.unit.TestCase val = ((global::haxe.unit.TestCase) (_g_head.item) );
					_g_head = _g_head.next;
					global::haxe.unit.TestCase c = ((global::haxe.unit.TestCase) (val) );
					this.runCase(c);
				}
				
			}
			
			global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), this.result.toString());
			return this.result.success;
		}
		
		
		public virtual void runCase(global::haxe.unit.TestCase t) {
			global::haxe.lang.Function old = global::haxe.Log.trace;
			global::haxe.Log.trace = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::haxe.unit.TestRunner), "customTrace", 727446804)) );
			global::System.Type cl = global::Type.getClass<object>(((object) (t) ));
			global::Array<object> fields = global::Type.getInstanceFields(cl);
			global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Class: ", global::Type.getClassName(cl)), " "));
			{
				int _g = 0;
				while (( _g < fields.length )) {
					string f = global::haxe.lang.Runtime.toString(fields[_g]);
					 ++ _g;
					string fname = f;
					object field = global::Reflect.field(t, f);
					if (( fname.StartsWith("test") && ( field is global::haxe.lang.Function ) )) {
						t.currentTest = new global::haxe.unit.TestStatus();
						t.currentTest.classname = global::Type.getClassName(cl);
						t.currentTest.method = fname;
						t.setup();
						try {
							global::Reflect.callMethod(t, field, new global::Array<object>());
							if (t.currentTest.done) {
								t.currentTest.success = true;
								global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), ".");
							}
							else {
								t.currentTest.success = false;
								t.currentTest.error = "(warning) no assert";
								global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), "W");
							}
							
						}
						catch (global::System.Exception __temp_catchallException1){
							global::haxe.lang.Exceptions.exception = __temp_catchallException1;
							object __temp_catchall2 = __temp_catchallException1;
							if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
								__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
							}
							
							if (( __temp_catchall2 is global::haxe.unit.TestStatus )) {
								global::haxe.unit.TestStatus e = ((global::haxe.unit.TestStatus) (__temp_catchall2) );
								{
									global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), "F");
									global::Array<object> tmp = global::haxe.CallStack.exceptionStack();
									t.currentTest.backtrace = global::haxe.CallStack.toString(tmp);
								}
								
							}
							else {
								object e1 = __temp_catchall2;
								global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), "E");
								string tmp1 = global::Std.@string(e1);
								t.currentTest.error = global::haxe.lang.Runtime.concat("exception thrown : ", tmp1);
								global::Array<object> tmp2 = global::haxe.CallStack.exceptionStack();
								t.currentTest.backtrace = global::haxe.CallStack.toString(tmp2);
							}
							
						}
						
						
						this.result.@add(t.currentTest);
						t.tearDown();
					}
					
				}
				
			}
			
			global::haxe.unit.TestRunner.print.__hx_invoke1_o(default(double), "\n");
			global::haxe.Log.trace = old;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1092664259:
					{
						this.cases = ((global::List<object>) (global::List<object>.__hx_cast<object>(((global::List) (@value) ))) );
						return @value;
					}
					
					
					case 142895325:
					{
						this.result = ((global::haxe.unit.TestResult) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1324823451:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "runCase", 1324823451)) );
					}
					
					
					case 5695307:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "run", 5695307)) );
					}
					
					
					case 4846113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "add", 4846113)) );
					}
					
					
					case 1092664259:
					{
						return this.cases;
					}
					
					
					case 142895325:
					{
						return this.result;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1324823451:
					{
						this.runCase(((global::haxe.unit.TestCase) (dynargs[0]) ));
						break;
					}
					
					
					case 5695307:
					{
						return this.run();
					}
					
					
					case 4846113:
					{
						this.@add(((global::haxe.unit.TestCase) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("cases");
			baseArr.push("result");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.unit {
	public class TestRunner_Anon_60__Fun : global::haxe.lang.Function {
		
		public TestRunner_Anon_60__Fun() : base(1, 0) {
		}
		
		
		public static global::haxe.unit.TestRunner_Anon_60__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			global::System.Console.Write(((object) (v) ));
			return null;
		}
		
		
	}
}


